var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Auto","page":"API","title":"Auto","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ChainPlots, ChainPlots.NeuralNumbers]","category":"page"},{"location":"api/#ChainPlots.FIXED_INPUT_DIM_LAYERS","page":"API","title":"ChainPlots.FIXED_INPUT_DIM_LAYERS","text":"FIXED_INPUT_DIM_LAYERS\n\nList of layers with fixed-size input data\n\n\n\n\n\n","category":"constant"},{"location":"api/#ChainPlots.NEURON_COLORS","page":"API","title":"ChainPlots.NEURON_COLORS","text":"NEURON_COLORS::Dict{Symbol, Symbol}\n\nSpecify the color for each type of layer.\n\n\n\n\n\n","category":"constant"},{"location":"api/#ChainPlots.UnitVector","page":"API","title":"ChainPlots.UnitVector","text":"UnitVector{T}\n\nStructure for unit vectors in a linear space\n\nUsed for generating a basis to infer the layer connection\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainPlots.chaingraph","page":"API","title":"ChainPlots.chaingraph","text":"chaingraph(m::Flux.Chain)\n\nReturn a MetaGraph representing the graph structure of the neural network.\n\nIn this case, the first layer must be a layer with fixed input dimension.\n\nSee chaingraph for the properties of each node of the graph.\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainPlots.chaingraph-Tuple{Flux.Chain, Array}","page":"API","title":"ChainPlots.chaingraph","text":"chaingraph(m::Flux.Chain, input_data::Array)\n\nReturn a MetaGraph representing the graph structure of the neural network.\n\nEach node represents a neuron of the Chain m and contains the following properties:     :layer_number: Int indicating to each layer it belongs (         with 0 indicating the input layer, 1, …, length(m)-1          indicating the hidden layers, and with length(m) indicating         the output layer);     :layer_type: symbol indicating the layer type it is part of in the Chain         (e.g. :Dense, :GRUCell, :Conv, …);     :index_in_layer: Tuple indicating the position of the neuron         within the layer. The indices cover the size of the layer, which is          given by a Tuple, e.g. of the form (n,) for Dense(n,m) and         RNN(n,m), or (n₁, …, nₖ,m,d,b) for convolutional layers, and so on;     :layer_center: Float64 with the vertical mid-point of the layer it belongs to.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.chaingraph-Tuple{Flux.Chain, Tuple}","page":"API","title":"ChainPlots.chaingraph","text":"chaingraph(m::Flux.Chain, ldim::Tuple)\n\nReturn a MetaGraph representing the graph structure of the neural network with an input of shape ldim.\n\nSee chaingraph for the properties of each node of the graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.chaingraph-Tuple{Union{Flux.Dense, Flux.GRUCell, Flux.LSTMCell, Flux.RNNCell, Flux.Recur}}","page":"API","title":"ChainPlots.chaingraph","text":"chaingraph(l::Union{Flux.Dense,Flux.Recur,Flux.RNNCell,Flux.LSTMCell,Flux.GRUCell})\n\nReturn a MetaGraph representing the graph structure of a neural network composed of the single layer l.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.get_dimensions-Tuple{Flux.Chain, Array}","page":"API","title":"ChainPlots.get_dimensions","text":"get_dimensions(m::Flux.Chain, inp::Union{Nothing, Array, Tuple} = nothing)\n\nReturn the dimensions of the input and of the output data of each hidden layer.\n\nIf input_data is not given, the first layer is required to be a layer with fixed input dimensions, such as Flux.Dense or Flux.Recur, otherwise the given data or shape is used to infer the dimensions of each layer.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.layerdimensions-Tuple{Flux.Dense}","page":"API","title":"ChainPlots.layerdimensions","text":"layerdimensions()\n\nRetrive dimensions of a given fixed-input-size layer.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.layerplotattributes-Tuple{Symbol}","page":"API","title":"ChainPlots.layerplotattributes","text":"layerplotattributes()\n\nRetrive plot attributes for each specific type of layer.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.neuron_color-Tuple{T} where T","page":"API","title":"ChainPlots.neuron_color","text":"neuron_color(s; neuron_colors = NEURON_COLORS)\n\nGrab the color for each specific type of neuron.\n\nThe color depends on the type of layer the neuron belongs to and the colorset given neuron_colors, which defaults to NEURON_COLORS.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.neuron_connections","page":"API","title":"ChainPlots.neuron_connections","text":"neuron_connections(m::Flux.Chain, input_data::Union{Nothing,Array,Tuple} = nothing) -> Vector{Dict{Tuple, Vector{Tuple}}}\n\nReturn all the connections from every neuron in each layer to the corresponding neurons in the next layer.\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainPlots.neuron_indices-Tuple{Tuple}","page":"API","title":"ChainPlots.neuron_indices","text":"neuron_indices(ldim:Tuple) -> Vector{NTuple{N, Int}} where N\n\nReturn all possible indices for a given Tuple ldim.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.plotchain","page":"API","title":"ChainPlots.plotchain","text":"plot(m::Flux.Chain, input_data::Union{Nothing,Array,Tuple} = nothing; kargs...)\n\nPlot the topology of Flux.Chain neural network m.\n\nIf the first layer accepts an input with arbitrary dimensions, an input_data must be provided, we can be a Vector, an Array, or just a Tuple with the dimensions of the input.\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainPlots.projection-Union{Tuple{N}, Tuple{T}, Tuple{Tuple{T, NTuple{N, T}}, Any, Any, Any}} where {T, N}","page":"API","title":"ChainPlots.projection","text":"projection(z, center, max_widths, dimensions)\n\nTransform the indexing of a neuron into its x and y coordinates for plotting.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainPlots.NeuralNumbers.NeuralNumber","page":"API","title":"ChainPlots.NeuralNumbers.NeuralNumber","text":"NeuralNumber <: Real\n\nNeuralNumber encodes the \"state\" of a neuron as an Int8.\n\nThe possible states are:     * state = Int8(0) for a \"cold\", or \"off\", state, meaning it can be triggered by a signal but it has not yet been triggered. It works as a neutral element in any diadic operation.     * state = Int8(1) for a \"hot\", or \"on\", state, meaning it has been triggered by a signal.\n\nThe aliases are     * cold = NeuralNumber(Int8(0))     * hot = NeuralNumber(Int8(1))\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainPlots.NeuralNumbers.fneutralize-Tuple{Any}","page":"API","title":"ChainPlots.NeuralNumbers.fneutralize","text":"fneutralize(m)\n\nConvert the parameters of a model to NeuralNumber with value cold.\n\n\n\n\n\n","category":"method"},{"location":"chain_examples/#Chain-Plots","page":"Chain Plots","title":"Chain Plots","text":"","category":"section"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"Here, we consider some examples of building both a MetaGraph and some plots.","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"First we load the necessary packages:","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"\nusing Flux\nusing Plots\nusing ChainPlots","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnr = Chain(Dense(2, 5, σ), RNN(5, 4, relu), LSTM(4, 4), GRU(4, 4), Dense(4, 3))\n\nplot(nnr)","category":"page"},{"location":"chain_examples/#Single-layer-networks-with-fixed-size-input","page":"Chain Plots","title":"Single layer networks with fixed-size input","text":"","category":"section"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"For illustrative purposes, we start with some simple, single-layer networks:","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"dl = Dense(2, 3)\nplot(dl, title=\"$dl\", titlefontsize=12)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"rl = RNN(3, 5)\nplot(rl, title=\"$rl\", titlefontsize=12)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"llstm = LSTM(4, 7)\nplot(llstm, title=\"$llstm\", titlefontsize=12)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"lgru = GRU(5, 7)\nplot(lgru, title=\"$lgru\", titlefontsize=12)","category":"page"},{"location":"chain_examples/#Single-layer-with-variable-input","page":"Chain Plots","title":"Single-layer with variable input","text":"","category":"section"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"Some layers accept input with varied size. In this case, we need to provide either an input, in the form of a Vector or Array, or the size of the input, in the form of a Tuple.","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"lvar = Conv((2,), 1 => 1)\nplot(lvar, rand(5, 1, 1))","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"plot(lvar, (8, 1, 1))","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnc = Conv((3,3), 1=>2)\nplot(nnc, (6, 5, 1, 1), title=\"$nnc\", titlefontsize=10)","category":"page"},{"location":"chain_examples/#Multilayer-networks","page":"Chain Plots","title":"Multilayer networks","text":"","category":"section"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnd = Chain(Dense(2, 5), Dense(5, 7, σ), Dense(7, 2, relu), Dense(2, 3))\nplot(nnd, title=\"$nnd\", titlefontsize=10, xaxis=nothing)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnr = Chain(Dense(2, 5, σ), RNN(5, 4, relu), LSTM(4, 4), GRU(4, 4), Dense(4, 3))\nplot(nnr, title=\"$nnr\", titlefontsize=7)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"x³(x) = x .^ 3\ndx(x) = x[2:end] - x[1:end-1]\nnna = Chain(Dense(2, 5, σ), dx, RNN(4, 6, relu), x³, LSTM(6, 4), GRU(4, 4), Dense(4, 3))\nplot(nna, title=\"$nna\", titlefontsize=7)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnx = Chain(x³, dx, LSTM(5, 10), Dense(10, 5))\ninput_data = rand(6)\nplot(nnx, input_data, title=\"$nnx\", titlefontsize=9)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"or just passing the dimensions:","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnx = Chain(x³, dx, LSTM(5, 10), Dense(10, 5))\nplot(nnx, (6,), title=\"$nnx\", titlefontsize=9)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nnrlwide = Chain(Dense(5, 8), RNN(8, 20), LSTM(20, 10), Dense(10, 7))\nplot(nnrlwide, title=\"$nnrlwide\", titlefontsize=9)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"reshape6x1x1(a) = reshape(a, 6, 1, 1)\nnnrs = Chain(x³, Dense(3, 6), reshape6x1x1, Conv((2,), 1 => 1), vec, Dense(5, 4))\nplot(nnrs, rand(Float32, 3), title=\"$nnrs\", titlefontsize=9)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"N = 4\nreshapeNxNx1x1(a) = reshape(a, N, N, 1, 1)\nnnrs2d = Chain(x³, Dense(4, N^2), reshapeNxNx1x1, Conv((2, 2), 1 => 1), vec)\nplot(nnrs2d, (4,), title=\"$nnrs2d\", titlefontsize=9)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nncg = Chain(Conv((3,3), 1=>4, leakyrelu, pad = 1),GroupNorm(4,2))\nplot(nncg, (6,6,1,1), title=\"$nncg\", titlefontsize=10)","category":"page"},{"location":"chain_examples/","page":"Chain Plots","title":"Chain Plots","text":"nncp = Chain(\n    Conv((3, 3), 1=>2, pad=(1,1), bias=false),\n    MaxPool((2,2)),\n    Conv((3, 3), 2=>4, pad=SamePad(), relu),\n    AdaptiveMaxPool((4,4)),\n    Conv((3, 3), 4=>4, relu),\n    GlobalMaxPool()\n)\nplot(nncp, (16, 16, 1, 1), title=\"Chain with convolutional and pooling layers\", titlefontsize=10)","category":"page"},{"location":"metagraphs_examples/#MetaGraphs-examples","page":"MetaGraphs examples","title":"MetaGraphs examples","text":"","category":"section"},{"location":"#ChainPlots.jl-documentation","page":"Overview","title":"ChainPlots.jl documentation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The aim of ChainPlots.jl is to provide a visualization of the topology of a neural network as constructed with Flux.Chain. It does that by constructing a MetaGraph of the neural network and by applying a Plots.jl recipe based on the MetaGraph.","category":"page"}]
}
